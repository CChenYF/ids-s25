---
title: "Effective Data Communication"
author: "Amer El Zein"
date: 2025-03-19
format:
  html:
    toc: true
    toc-depth: 2
    code-fold: false
    number-sections: false
    fig-cap-location: bottom
    link-external-icon: true
    link-external-newwindow: true
execute:
    echo: false
---

This post is inspired by Cole Nussbaumer Knaflic's **Storytelling with Data**
which provides a comprehensive guide on selecting and designing effective 
visualizations.

---

## Why Data Communication Is Crucial

As data scientists, our primary goal is to extract **actionable insights** from
data. However, the effectiveness of our analysis is often undermined by poor 
communication. In a world inundated with information, the ability to convey 
insights clearly and effectively is paramount. 

Poor communication isn't just inconvient; it can be **catastrophic**. 

## The Challenger Disaster: A Tragic case of Miscommunication

Let's consider a sobering example: the Challenger shuttle disaster. 
Engineers had access to data about O-ring failures and cold temperatures. 
But the visualizations were unable to demonstrate them. 

## Visuals from the Challenger Launch Review

### Figure 1: O-Ring Incidents vs. Temperature
![Figure 1: O-Ring Incidents vs. Temperature](images/communication_in_data_science/rockets_chart.png){fig-align="center" width="70%"}

This scatter plot was presented to NASA leadership to illustrate the number of
O-ring damage incidents at different launch temperatures.

While it appears objective and data-driven, the graph is **misleading** for 
several key reasons:

- It includes only **missions with reported damage**, omitting those where 
no damage occurred.
- This omission **hides the full distribution**, masking the correlation between 
**lower temperatures and higher failure rates**.
- There are **no clear trend lines**, threshold indicators, or risk annotations 
to guide interpretation  
- It is incredibly confusing to read, while it may relay positional damage, 
understanding the severity of the damage and even the premise of the graph is 
incredibly difficult at first attempts. 

This graph failed to convey the critical risk of launching in cold 
weather—particularly at the **forecasted 23°F**, well below any previously 
tested temperature.
--- 

### Figure 2: History of O-Ring Damage (Decorative Rocket Diagram)

![Figure 2: History of O-Ring Damage in Field Joints](images/communication_in_data_science/challenger_graph.gif){fig-align="center" width="90%"}

This visual uses stylized rockets to represent previous missions and marks
 erosion (`E`), blow-by (`B`), and heat-related (`H`) incidents across rocket
  joints.

However, despite being visually dense, the graphic has several flaws:

- It’s **decorative rather than analytical**—more like clip art than a 
functional chart.
- There is **no axis**, **no aggregation**, or **visualization of risk trends**.
- The symbols (`E`, `B`, `H`) are not fully explained, and their visual
hierarchy is unclear.
- It only demosntrates failed attempts, by omitting successes, readers were 
unable to view a trend of failure under a certain temperature 

In short, this chart **fails to tell the story**. The data is present,
 but there’s no narrative, no framing of risk, and no direct call to action.

---

> These two visuals—despite being based on real data—demonstrate how 
**data without clear communication can mislead decision-makers** at critical
moments.

The rest of this blog post will focus on best practices for data communication, 
such that we can avoid such catastrophic miscommucations, born from a 
misunderstanding of how to convey **critical insights**

--- 

## Core Principles of Effective Data Communication

### 1. Know Your Audience

Different stakeholders require different levels of detail, tone, and framing.

| Audience Type       | Communication Style                                                   |
|---------------------|------------------------------------------------------------------------|
| **General Audience** | Simple explanations, real-world analogies, strong visual cues         |
| **Executives**       | Focus on ROI, strategic insights, and key decisions                   |
| **Technical Teams**  | Emphasize accuracy, methodology, and reproducibility                 |

**Ask yourself:**  
 *If they remember only one thing, what should it be?*

--- 

### 2. Match the Message to the Medium

Not all communication channels are created equal.

| Presentations                | Reports & Emails             |
|-----------------------------|------------------------------|
| Time-constrained            | Asynchronous & referenceable |
| Interactive Q&A possible    | Limited feedback loop         |
| Visual storytelling focus   | Detailed and structured       |

**Rule of thumb:** The more **control** you have in the room, the **less text** 
you need on screen.

---

### 3. Structure Your Data Like a Story

Humans are wired to respond to stories. Think of your analysis as a narrative:

- **Context** – What are we trying to solve?
- **Conflict** – What's at stake?
- **Climax** – What does the data reveal?
- **Conclusion** – What should we do?
![Figure 3: Storytelling in Data](images/communication_in_data_science/storytelling_format.png){fig-align="center" width="90%"}

Use visuals as narrative beats—not just as background noise. By nestling them in
narratives, they're more likely to stick within the minds of the audience, as 
well as be more comprehensible. The narrative should be introduced and 
explained, alternatives should be outlined, and your final recommendations 
should be justified at the end of the work. 

---


## Visual Design: Make the Message Clear

When communicating with data, how your charts *look* is just as important as what they *show*. Good visual design doesn’t mean decoration—it means clarity.

### Gestalt Principles in Visualization

Gestalt principles explain how humans naturally group visual elements. You can use them to guide attention, highlight relationships, and reduce cognitive load.

```{python} 
import matplotlib.pyplot as plt
import numpy as np

fig, axes = plt.subplots(2, 2, figsize=(8, 7), gridspec_kw={'wspace': 0.4, 'hspace': 0.4})

# Proximity
for i in range(3):
    axes[0, 0].scatter(np.full(5, i * 2), np.arange(5), s=200, color='blue')
axes[0, 0].set_title("Proximity")
axes[0, 0].set_xticks([]); axes[0, 0].set_yticks([])

# Similarity
for i in range(3):
    axes[0, 1].scatter(np.full(5, i * 2), np.arange(5), s=200, color=['blue', 'red'][i % 2])
axes[0, 1].set_title("Similarity")
axes[0, 1].set_xticks([]); axes[0, 1].set_yticks([])

# Unconnected points
x, y = [1, 2, 3, 4, 5], [2, 4, 1, 3, 5]
axes[1, 0].plot(x, y, 'o', color='blue')
axes[1, 0].set_title("Unconnected Points")
axes[1, 0].set_xticks([]); axes[1, 0].set_yticks([])

# Connected points
axes[1, 1].plot(x, y, 'o-', color='blue')
axes[1, 1].set_title("Connected Points")
axes[1, 1].set_xticks([]); axes[1, 1].set_yticks([])

plt.show()
```

#### **1. Proximity**
- Objects that are close together are perceived as belonging to the same group.  
- Use spacing to group related data points or labels. Elements placed near each other will be seen as connected—even without lines or boxes. For example: in a 
scatterplot, clustering points together can help imply a category or trend
without explicitly stating it.



#### **2. Similarity**  
- Items that look similar (in shape, color, size, etc.) are perceived as part of 
the same group.  
-  Consistent formatting helps create visual categories. For example, using the 
same color for bars from the same group reinforces their connection. 
For example: In a line chart with multiple series, color or marker shape can distinguish different groups while maintaining coherence.

#### **3. Connectedness**  
- When elements are visually connected by lines or paths, they are perceived as related—even if they’re spaced apart.  
- Connecting data points with lines (like in a line chart) strongly implies continuity, sequence, or progression.  For example: when using time-series, 
connecting points in order helps the audience see a trend over time.

#### **4. Continuity** 
- The eye naturally follows paths, lines, or curves, and continues along them.  
- Smooth lines or aligned elements guide the viewer’s eye through the visual, helping emphasize flow or direction,  when constructing visualizations, remain cognizant 
that movement in a chart—like a trend line—supports storytelling by guiding
attention from left to right.

--- 

## Choosing the Right Chart

Not all charts are created equal. Here's a brief guide to common types of charts
and when to use them. 

---

### Line Charts
These are often the best for showing trends, patterns and changes over time. 

**Use when:**  
- Your x-axis represents a continuous variable (like time, distance, or
temperature).

- You want to emphasize upward/downward trends, volatility, or cycles.

**Best Practices:**
- Use **minimal gridlines** and tick marks.

- Highlight key changes with **annotations** or color.

- Avoid too many lines—stick to **3–4 series max** to reduce clutter.

- Use consistent intervals on the x-axis.

```{python}
x = np.arange(1, 11)
y1 = np.random.randint(40, 80, size=10)
y2 = y1 + np.random.randint(-10, 10, size=10)

plt.figure(figsize=(6, 3))
plt.plot(x, y1, marker='o', label='Series A')
plt.plot(x, y2, marker='s', linestyle='--', label='Series B')
plt.title("Line Chart Example")
plt.xlabel("Time"); plt.ylabel("Value")
plt.legend(); plt.show()
```

---

### Bar Charts: 
**Best for:** Comparing values across discrete categories.

**Use when:**  

- Your categories are nominal (e.g., product names, regions).

- You want to emphasize differences between groups.

**Best Practices:**

- Use horizontal bars if category names are long.

- Sort bars by value to help viewers scan quickly.

- Use consistent spacing and avoid 3D effects.

- Use one color per category unless emphasizing comparison.

- Always start the Y-Axis at 0
```{python}
categories = ["McRonalds", "Burger Prince", "Crisp-Fil-A", "Marcie's"]
values = [1600, 1200, 1800, 1100]

plt.bar(categories, values, color='royalblue', edgecolor='black')
plt.title("Calories per Fast Food Chain")
plt.ylabel("kCal"); plt.ylim(0, 2000)
plt.show()
```

---

### Scatter & Bubble Charts

**Best for:** Displaying relationships between two (or three) continuous variables.

**Use when:**  

- You want to explore correlations, clusters, or outliers.

- You want to show the distribution of observations.

- You can encode a third variable with bubble size or color.

**Best Practices:**
- Label outliers if they carry special meaning.

- Use transparency for overlapping points.

- Add a trend line if you want to show linear correlation.

- Keep axis ranges consistent for accurate interpretation.


```{python}
np.random.seed(42)
products_sold = np.random.randint(100, 1800, 20)
revenue = np.random.randint(1000, 200000, 20)
product_price = np.random.randint(50, 500, 20)

plt.scatter(products_sold, revenue, s=product_price * 5, alpha=0.6, edgecolors='black')
plt.xlabel("Products Sold"); plt.ylabel("Revenue (USD)")
plt.title("Sales Performance (Bubble Chart)"); plt.show()
```

---

### Tables

**Best for:** Displaying precise values, multi-unit comparisons, or rich metadata.

**Use when:**  

- Users need to look up specific values.

- You're reporting multiple metrics across categories.

**Best Practices:**
- Use zebra striping to improve scan-ability.

- Limit columns to 4–6 for readability.

- Right-align numbers and left-align text.

- Highlight important rows/columns with bold or color.

```{python}
import pandas as pd
df = pd.DataFrame({
    "Client": ["Adam", "Cate", "David", "Amer", "Markus"],
    "Spent ($)": [310.12, 106.74, 1299.99, 480.38, 600],
    "Items": [4, 2, 20, 6, 8],
    "Location": ["Boston", "Tuskaloosa", "Boston", "Paris", "Kansas City"]
})
df
```

---

### Heatmaps

**Best for:** Showing density, intensity, or distribution over space 

**Use when:**  

- You're working with geospatial or high-frequency data.

- You want to identify hotspots or areas of concentration.

- A scatterplot is too cluttered to be readable.

**Best Practices:**

- Choose a color palette that aligns with your message (e.g., red for danger, 
blue for calm).

- Include a legend to explain the scale.

- Combine with maps when visualizing geographic data.

- Don’t over-smooth—avoid hiding meaningful variation.

---

### Pie Charts (Use Sparingly)

**Best for:** Showing part-to-whole relationships—only when there are very few categories.

**Use when:**  

- You have 2–3 categories max.

- The proportions are dramatically different.

**Best Practices:**

- Avoid pie charts unless you're certain they add clarity.

- Don’t use more than 5 slices.

- Always label percentages or values directly.

- Never use 3D pie charts—they distort perception.

```{python}
labels = [f"Category {c}" for c in "ABCDE"]
values = np.random.randint(5, 20, size=5)

plt.pie(values, labels=labels, autopct='%1.1f%%', startangle=140)
plt.title("Avoid Pie Charts When Possible"); plt.show()
```

---

## Summary: Chart Selection at a Glance

| Chart Type       | Best For                                | Avoid When...                               |
|------------------|------------------------------------------|----------------------------------------------|
| Line Chart       | Trends over time                        | Comparing unrelated categories               |
| Bar Chart        | Category comparisons                    | Showing progression or continuous data       |
| Scatter Plot     | Relationships, outliers                 | Categorical-only data                        |
| Bubble Chart     | 3-variable comparison                   | Small datasets or exact comparisons          |
| Table            | Precise lookup or mixed metrics         | Summarizing trends or large-scale patterns   |
| Heatmap          | Density, concentration, matrix data     | Small datasets or low variation              |
| Pie Chart        | Part-to-whole (very small category set) | You have more than 4–5 categories            |

---

Choose wisely. The right chart doesn’t just visualize data—it **amplifies understanding**.

---

## Fixing the Challenger Graph

We’ve talked about how poor communication played a role in the Challenger disaster—but what would a *better* graph have looked like?

Let’s recap what went wrong:

- The original graphs only showed **missions with O-ring damage**, ignoring those that had **no issues**.
- The visuals had **no clear trendline**, **no axis labels**, and **no annotations** to guide interpretation.
- Crucially, the **forecasted launch temperature (23°F)** was not highlighted or compared to historical data.

The result? Decision-makers failed to see the strong relationship between **cold weather** and **O-ring failure**.

---

### A Better Graph: O-Ring Damage vs. Temperature

Let’s reconstruct the data in a way that highlights what really matters: the **correlation between temperature and total damage** (erosion + blow-by).

```{python}
import pandas as pd
import matplotlib.pyplot as plt

# Reconstructed Challenger data from historical sources
data = {
    "Temperature": [53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81],
    "Erosion":     [3,  1,  1,  1,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    "Blowby":      [2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0],
}
df = pd.DataFrame(data)
df["Total"] = df["Erosion"] + df["Blowby"]

# Plot
plt.figure(figsize=(7, 6))
plt.scatter(df["Temperature"], df["Total"], color='black', s=80)

# Add annotation for forecasted temperature
plt.axvline(x=23, color='red', linestyle='--', linewidth=2)
plt.text(24, max(df["Total"])-1, "Forecasted Launch Temp: 23°F", color='red', fontsize=10)

# Styling
plt.title("Total O-Ring Damage vs. Temperature", fontsize=14)
plt.xlabel("Temperature (°F)", fontsize=12)
plt.ylabel("Total O-Ring Damage Incidents", fontsize=12)
plt.grid(True, linestyle='--', alpha=0.5)
plt.xticks(range(50, 85, 5))
plt.tight_layout()
plt.show()
```

---

### A Clearer Narrative

This version of the graph tells a much stronger story:

> - “Every successful launch occurred at **temperatures above 65°F**.”  
> - “At **23°F**, we are flying more than **40 degrees below** the coldest safe launch.”  
> - “All low-temperature launches showed increased O-ring damage. The risk is 
real—and visible.”

Had this visual been shared in the decision-making room, it could have 
changed the course of history.

Always remember, that a single clear chart—grounded in context—can save lives.

---

## Key Takeaways

- **Know your audience.** Tailor your message to their needs, goals, and level
of expertise.

- **Be intentional with visuals.** Every chart should serve a purpose—clarify, 
don’t decorate.

- **Structure your insights like a story.** Lead your audience from problem to solution.

- **Simplify without dumbing down.** Clarity beats complexity.

Your job isn't just to show the data, it's to communicate it. 

---

## References

- Knaflic, Cole Nussbaumer. *Storytelling with Data: A Data Visualization Guide
for Business Professionals*. Wiley, 2015.

- Gulbis, Janis. ["Data Visualization – How to Pick the Right Chart Type?"](https://eazybi.com/blog/data-visualization-how-to-pick-the-right-chart-type) *eazyBI Blog*, 2016.

- Helveston, Dr. John Paul. ["A Case Study on Turning Data into Information."](https://p4a.seas.gwu.edu/2019-Fall/challengerExplosion.html) *EMSE 6574: Programming for Analytics, George Washington University*, 2019.
